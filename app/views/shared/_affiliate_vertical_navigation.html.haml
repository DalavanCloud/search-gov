- rss_feed = @search.is_a?(NewsSearch) ? @search.rss_feed : nil
- document_collection = @search.is_a?(OdieSearch) ? @search.document_collection : nil
- search_params = {:query => params[:query], :affiliate => @affiliate.name}
- search_params.merge!(:channel => rss_feed.id) if rss_feed
- search_params.merge!(:tbs => params[:tbs]) if params[:tbs]
= javascript_tag "var original_query = \"#{escape_javascript @search.query}\";"
= left_nav_label(@affiliate.left_nav_label) unless @affiliate.uses_one_serp?
- left_nav_tag = @affiliate.uses_one_serp? ? :div : :span
%ul.rss-feeds
  %li
    = link_to_unless(@search.instance_of?(WebSearch) || (@search.instance_of?(NewsSearch) && params[:channel].nil?), @affiliate.default_search_label, params[:tbs] ? news_search_path(search_params.remove(:channel, :dc)) : search_path(search_params.remove(:channel)), :class => 'updatable') do |everything|
      = content_tag left_nav_tag, everything
  = render_navigations @affiliate.navigations.active, search_params, left_nav_tag,
    @search.instance_of?(ImageSearch), { :document_collection => document_collection, :rss_feed => rss_feed }

- if @search.instance_of?(NewsSearch) and @affiliate.is_time_filter_enabled?
  %ul.time-filters
    %li
      = link_to_if(params[:tbs], t(:all_time), rss_feed ? news_search_path(search_params.remove(:tbs)) : search_path(search_params.remove(:tbs)), :class => 'updatable') do |everything|
        = content_tag left_nav_tag, everything
    - NewsItem::TIME_BASED_SEARCH_OPTIONS.each_pair do |tbs, extent|
      %li{ :class => (extent == :year ? 'last' : nil) }
        = link_to_unless((params[:tbs] == tbs), t("last_#{extent}".to_sym), news_search_path(search_params.merge(:tbs => tbs)), :class => 'updatable') do |last_time|
          = content_tag left_nav_tag, last_time

- if @search.instance_of?(VideoNewsSearch) and @affiliate.is_time_filter_enabled?
  %ul.time-filters
    %li
      = link_to_if(params[:tbs], t(:all_time), rss_feed ? video_news_search_path(search_params.remove(:tbs)) : search_path(search_params.remove(:tbs)), :class => 'updatable') do |everything|
        = content_tag left_nav_tag, everything
    - NewsItem::TIME_BASED_SEARCH_OPTIONS.each_pair do |tbs, extent|
      %li{ :class => (extent == :year ? 'last' : nil) }
        = link_to_unless((params[:tbs] == tbs), t("last_#{extent}".to_sym), video_news_search_path(search_params.merge(:tbs => tbs)), :class => 'updatable') do |last_time|
          = content_tag left_nav_tag, last_time
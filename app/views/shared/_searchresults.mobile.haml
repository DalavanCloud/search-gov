

= spelling_suggestion(search, @affiliate) if (search)

- if search.results.present?
  %hr
  - if (search && search.recalls && search.recalls.total > 0)
    .group{:id => "recalls"}
      %h1 Recent Recalls
      - search.recalls.hits.each_with_index do |hit, index|
        .row{:id => "recall#{index+1}"}
          .links= link_to "#{hit.instance.summary}, #{hit.instance.recalled_on.to_formatted_s(:short).strip}", hit.instance.recall_url
  .group
    - affiliate_name = @affiliate.present? ? @affiliate.name : nil
    - search.results.each_with_index do |search_result, index|
      .row{:id => "searchresult#{index+1}"}
        .searchResult
          .title= display_result_title(search_result, search, affiliate_name, index)
          .content
            = display_result_description(search_result)
          .links= shorten_url(search_result['unescapedUrl'])
          - if index.zero? and search.page.zero?
            = display_deep_links_for(search_result)
      - unless index == search.results.length - 1 then
        %hr
  .group
    .row.center
      = will_paginate search.results, :page_links => false, :previous_label => "", :next_label => "Next Page"
    
  - if (search && search.related_search.present?)
    #relatedsearch
      %p= "Searches related to '#{h search.query}'"
      %ul
        - search.related_search.each_with_index do |result, index|
          %li= tracked_click_link(shunt_from_bing_to_usasearch(result.url, @affiliate ),translate_bing_highlights(h(result.title)), search, nil, index, 'BREL')

- elsif search.error_message
  %p.noresults #{search.error_message}
- else
  = no_results_for search.query

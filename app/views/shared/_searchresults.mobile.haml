= bing_spelling_suggestion_for(search, @affiliate, @search_vertical) if (search)
- if (search.page == 0 and search.boosted_contents and search.boosted_contents.total > 0)
  = render 'shared/boosted_content', :search => search
- elsif (search.faqs and search.faqs.total > 0)
  = render 'shared/related_faqs', :search => search
- if search.results.present?
  %hr.topresults
  - if (search && search.recalls && search.recalls.total > 0)
    .group{:id => "recalls"}
      %h1 Recent Recalls
      - search.recalls.hits.each_with_index do |hit, index|
        .row{:id => "recall#{index+1}"}
          .links= (link_to "#{highlight_like_solr(hit.instance.summary, hit.highlights)}, #{hit.instance.recalled_on.to_formatted_s(:short).strip}".html_safe, hit.instance.recall_url)
  .group
    - search.results.each_with_index do |search_result, index|
      .row{:id => "searchresult#{index+1}"}
        .searchResult
          .title
            = display_bing_result_extname_prefix(search_result)
            = display_bing_result_title(search_result, search, @affiliate, index, @search_vertical)
          .content
            = display_result_description(search_result)
          .links= shorten_url(search_result['unescapedUrl'])
          - if index.zero? and search.page.zero?
            = display_deep_links_for(search_result, search, @affiliate, @search_vertical)
      - unless index == search.results.length - 1 then
        %hr
  .group
    .row.center
      = will_paginate search.results, :previous_label => (t :prev_label), :next_label => (t :next_label), :inner_window => 1, :outer_window => 0

  - if (search && search.has_related_searches?)
    #relatedsearch
      %p= t :searches_related_to, :query=> search.query
      %ul
        - search.related_search.each_with_index do |related_term, index|
          - module_name = (search.related_search_class == "CalaisRelatedSearch" ? 'CREL' : 'SREL')
          %li= tracked_click_link(search_path({:query=>strip_tags(related_term), :affiliate=> @affiliate, :m => true }),related_term.html_safe, search, @affiliate, index, module_name)

- elsif search.error_message
  %p.noresults #{search.error_message}
- else
  = no_results_for search.query
